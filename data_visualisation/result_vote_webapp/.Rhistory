points(x = 16, y = 16, col = "red", pch = 1, cex = 4, lwd = 3)
points(x = 17, y = 16, col = "red", pch = 1, cex = 4, lwd = 3)
text(x = 16.5, y = 17.5, "règle 5", col = "red", lwd = 3)
points(x = 2, y = 1, col = "red", pch = 1, cex = 4, lwd = 3)
text(x = 2, y = 2.5, "règle 1", col = "red")
#### REAL CC ####
# Limits #
proba = 0.025
nech = 370
mean_val = proba*nech
multi = 2
UCL = 0.025 + sqrt((0.025*0.975)/370)
LCL = 0.025 - sqrt((0.025*0.975)/370)
UCL2 = 0.025 + 2*sqrt((0.025*0.975)/370)
LCL2 = 0.025 - 2*sqrt((0.025*0.975)/370)
UCL3 = 0.025 + 3*sqrt((0.025*0.975)/370)
LCL3 = 0.025 - 3*sqrt((0.025*0.975)/370)
# rule 1 #
#--------#
echantillon = seq(1,15)
rand_mean = rbinom(15, size = nech, prob = proba)/nech
for(i in rand_mean){
cat(i,",",sep="")
}
echantillon = 1:15
value = c(0.02162162,0.04054054,0.02702703,0.02162162,0.03243243,0.02162162,
0.01081081,0.02972973,0.02972973,0.055,0.03243243,0.03243243,
0.02432432,0.02972973,0.02432432)
Alerte = rep("NON", 15)
Alerte[10] = "OUI"
plot_rule1 = ggplot() + geom_point(aes(x=echantillon, y=value,
color=Alerte), size= 3) +
scale_color_manual(values = c("#000000", "#F6685E")) +
xlim(c(0,15)) + ylim(c(-0.005,0.075)) + xlab("Numéro d'échantillon") + ylab("Proportion de violations") +
geom_rect(mapping = aes(xmin=9.5, xmax=10.5, ymin=0, ymax=0.075),
colour = "grey", alpha= 0.2) +
geom_hline(yintercept = proba, color = "#000000", size=1.2) +
geom_hline(yintercept = UCL, color = "#AA2E25", size=1.2, lty="dotted") +
geom_hline(yintercept = LCL, color = "#AA2E25", size=1.2, lty="dotted") +
annotate(geom="text", x=0, y=UCL+0.002, label=expression(paste(sigma)),
size = 5, color="#AA2E25") +
annotate(geom="text", x=0, y=LCL-0.002, label=expression(paste(sigma)),
size = 5, color="#AA2E25") +
geom_hline(yintercept = UCL2, color = "#AA2E25", size=1.2, lty="dotted") +
geom_hline(yintercept = LCL2, color = "#AA2E25", size=1.2, lty="dotted") +
annotate(geom="text", x=0, y=UCL2+0.002, label=expression(paste("2",sigma)),
size = 5, color="#AA2E25") +
annotate(geom="text", x=0, y=LCL2-0.002, label=expression(paste("2",sigma)),
size = 5, color="#AA2E25") +
geom_hline(yintercept = UCL3, color = "#AA2E25", size=1.2) +
geom_hline(yintercept = LCL3, color = "#AA2E25", size=1.2) +
annotate(geom="text", x=0, y=UCL3+0.002, label=expression(paste("3",sigma)),
size = 5, color="#AA2E25") +
annotate(geom="text", x=0, y=LCL3-0.002, label=expression(paste("3",sigma)),
size = 5, color="#AA2E25") +
theme_light() +
theme(text = element_text(size = 10 * multi),
legend.position = c(0.12,0.86),
legend.background = element_rect(fill = "transparent"))
plot_rule1
# rule 2 #
#--------#
echantillon = seq(1,15)
rand_mean = rbinom(15, size = nech, prob = proba)/nech
for(i in rand_mean){
cat(i,",",sep="")
}
echantillon = 1:15
value = c(0.02702703,0.03513514,0.01891892,0.02632432,0.02581081,0.02732432,
0.03162162,0.04243243,0.02543243,0.03513514,0.02832432,0.03243243,
0.02162162,0.03783784,0.02702703)
Alerte = rep("NON", 15)
Alerte[12] = "OUI"
plot_rule2 = ggplot() + geom_point(aes(x=echantillon, y=value, color=Alerte), size= 3) +
scale_color_manual(values = c("#000000", "#F6685E")) +
geom_rect(mapping = aes(xmin=3.5, xmax=12.5, ymin=0, ymax=0.075),
colour = "grey", alpha= 0.2) +
xlim(c(0,15)) + ylim(c(-0.005,0.075)) + xlab("Numéro d'échantillon") + ylab("Proportion de violations") +
geom_hline(yintercept = proba, color = "#000000", size=1.2) +
geom_hline(yintercept = UCL, color = "#AA2E25", size=1.2, lty="dotted") +
geom_hline(yintercept = LCL, color = "#AA2E25", size=1.2, lty="dotted") +
annotate(geom="text", x=0, y=UCL+0.002, label=expression(paste(sigma)),
size = 5, color="#AA2E25") +
annotate(geom="text", x=0, y=LCL-0.002, label=expression(paste(sigma)),
size = 5, color="#AA2E25") +
geom_hline(yintercept = UCL2, color = "#AA2E25", size=1.2, lty="dotted") +
geom_hline(yintercept = LCL2, color = "#AA2E25", size=1.2, lty="dotted") +
annotate(geom="text", x=0, y=UCL2+0.002, label=expression(paste("2",sigma)),
size = 5, color="#AA2E25") +
annotate(geom="text", x=0, y=LCL2-0.002, label=expression(paste("2",sigma)),
size = 5, color="#AA2E25") +
geom_hline(yintercept = UCL3, color = "#AA2E25", size=1.2) +
geom_hline(yintercept = LCL3, color = "#AA2E25", size=1.2) +
annotate(geom="text", x=0, y=UCL3+0.002, label=expression(paste("3",sigma)),
size = 5, color="#AA2E25") +
annotate(geom="text", x=0, y=LCL3-0.002, label=expression(paste("3",sigma)),
size = 5, color="#AA2E25") +
theme_light() +
theme(text = element_text(size = 10 * multi),
legend.position = c(0.12,0.86),
legend.background = element_rect(fill = "transparent"))
plot_rule2
# rule 3 #
#--------#
echantillon = seq(1,15)
rand_mean = rbinom(15, size = nech, prob = proba)/nech
for(i in rand_mean){
cat(i,",",sep="")
}
echantillon = 1:15
value = c(0.02702703,0.02432432,0.02432432,0.02702703,0.01351351,0.02162162,
0.02432432,0.02702703,0.02932432,0.03243243,0.02162162,0.03783784,
0.02162162,0.03243243,0.01621622)
Alerte = rep("NON", 15)
Alerte[10] = "OUI"
plot_rule3 = ggplot() + geom_point(aes(x=echantillon, y=value, color=Alerte), size= 3) +
scale_color_manual(values = c("#000000", "#F6685E")) +
geom_rect(mapping = aes(xmin=4.5, xmax=10.5, ymin=0, ymax=0.075),
colour = "grey", alpha= 0.2) +
xlim(c(0,15)) + ylim(c(-0.005,0.075)) + xlab("Numéro d'échantillon") + ylab("Proportion de violations") +
geom_hline(yintercept = proba, color = "#000000", size=1.2) +
geom_hline(yintercept = UCL, color = "#AA2E25", size=1.2, lty="dotted") +
geom_hline(yintercept = LCL, color = "#AA2E25", size=1.2, lty="dotted") +
annotate(geom="text", x=0, y=UCL+0.002, label=expression(paste(sigma)),
size = 5, color="#AA2E25") +
annotate(geom="text", x=0, y=LCL-0.002, label=expression(paste(sigma)),
size = 5, color="#AA2E25") +
geom_hline(yintercept = UCL2, color = "#AA2E25", size=1.2, lty="dotted") +
geom_hline(yintercept = LCL2, color = "#AA2E25", size=1.2, lty="dotted") +
annotate(geom="text", x=0, y=UCL2+0.002, label=expression(paste("2",sigma)),
size = 5, color="#AA2E25") +
annotate(geom="text", x=0, y=LCL2-0.002, label=expression(paste("2",sigma)),
size = 5, color="#AA2E25") +
geom_hline(yintercept = UCL3, color = "#AA2E25", size=1.2) +
geom_hline(yintercept = LCL3, color = "#AA2E25", size=1.2) +
annotate(geom="text", x=0, y=UCL3+0.002, label=expression(paste("3",sigma)),
size = 5, color="#AA2E25") +
annotate(geom="text", x=0, y=LCL3-0.002, label=expression(paste("3",sigma)),
size = 5, color="#AA2E25") +
theme_light() +
theme(text = element_text(size = 10 * multi),
legend.position = c(0.12,0.86),
legend.background = element_rect(fill = "transparent"))
plot_rule3
# rule 5 #
#--------#
echantillon = seq(1,15)
rand_mean = rbinom(15, size = nech, prob = proba)/nech
for(i in rand_mean){
cat(i,",",sep="")
}
echantillon = 1:15
value = c(0.02432432,0.02162162,0.04513514,0.02972973,0.04891892,0.02972973,
0.02432432,0.02972973,0.01621622,0.01891892,0.02432432,0.01621622,
0.04762162,0.04254054,0.01891892)
Alerte = rep("NON", 15)
Alerte[5] = "OUI"
Alerte[14] = "OUI"
plot_rule5 = ggplot() + geom_point(aes(x=echantillon, y=value, color=Alerte), size= 3) +
scale_color_manual(values = c("#000000", "#F6685E")) +
geom_rect(mapping = aes(xmin=2.5, xmax=5.5, ymin=0, ymax=0.075),
colour = "grey", alpha= 0.2) +
geom_rect(mapping = aes(xmin=11.5, xmax=14.5, ymin=0, ymax=0.075),
colour = "grey", alpha= 0.2) +
xlim(c(0,15)) + ylim(c(-0.005,0.075)) + xlab("Numéro d'échantillon") + ylab("Proportion de violations") +
geom_hline(yintercept = proba, color = "#000000", size=1.2) +
geom_hline(yintercept = UCL, color = "#AA2E25", size=1.2, lty="dotted") +
geom_hline(yintercept = LCL, color = "#AA2E25", size=1.2, lty="dotted") +
annotate(geom="text", x=0, y=UCL+0.002, label=expression(paste(sigma)),
size = 5, color="#AA2E25") +
annotate(geom="text", x=0, y=LCL-0.002, label=expression(paste(sigma)),
size = 5, color="#AA2E25") +
geom_hline(yintercept = UCL2, color = "#AA2E25", size=1.2, lty="dotted") +
geom_hline(yintercept = LCL2, color = "#AA2E25", size=1.2, lty="dotted") +
annotate(geom="text", x=0, y=UCL2+0.002, label=expression(paste("2",sigma)),
size = 5, color="#AA2E25") +
annotate(geom="text", x=0, y=LCL2-0.002, label=expression(paste("2",sigma)),
size = 5, color="#AA2E25") +
geom_hline(yintercept = UCL3, color = "#AA2E25", size=1.2) +
geom_hline(yintercept = LCL3, color = "#AA2E25", size=1.2) +
annotate(geom="text", x=0, y=UCL3+0.002, label=expression(paste("3",sigma)),
size = 5, color="#AA2E25") +
annotate(geom="text", x=0, y=LCL3-0.002, label=expression(paste("3",sigma)),
size = 5, color="#AA2E25") +
theme_light() +
theme(text = element_text(size = 10 * multi),
legend.position = c(0.12,0.86),
legend.background = element_rect(fill = "transparent"))
plot_rule5
# rule 6 #
#--------#
echantillon = seq(1,15)
rand_mean = rbinom(15, size = nech, prob = proba)/nech
for(i in rand_mean){
cat(i,",",sep="")
}
echantillon = 1:15
value = c(0.02432432,0.02162162,0.04013514,0.03352973,0.04891892,0.02972973,
0.03632432,0.01621622,0.02972973,0.01891892,0.00832432,0.01621622,
0.01062162,0.01254054,0.01891892)
Alerte = rep("NON", 15)
Alerte[7] = "OUI"
Alerte[14] = "OUI"
plot_rule6 = ggplot() + geom_point(aes(x=echantillon, y=value, color=Alerte), size= 3) +
scale_color_manual(values = c("#000000", "#F6685E")) +
geom_rect(mapping = aes(xmin=2.5, xmax=7.5, ymin=0, ymax=0.075),
colour = "grey", alpha= 0.2) +
geom_rect(mapping = aes(xmin=9.5, xmax=14.5, ymin=0, ymax=0.075),
colour = "grey", alpha= 0.2) +
xlim(c(0,15)) + ylim(c(-0.005,0.075)) + xlab("Numéro d'échantillon") + ylab("Proportion de violations") +
geom_hline(yintercept = proba, color = "#000000", size=1.2) +
geom_hline(yintercept = UCL, color = "#AA2E25", size=1.2, lty="dotted") +
geom_hline(yintercept = LCL, color = "#AA2E25", size=1.2, lty="dotted") +
annotate(geom="text", x=0, y=UCL+0.002, label=expression(paste(sigma)),
size = 5, color="#AA2E25") +
annotate(geom="text", x=0, y=LCL-0.002, label=expression(paste(sigma)),
size = 5, color="#AA2E25") +
geom_hline(yintercept = UCL2, color = "#AA2E25", size=1.2, lty="dotted") +
geom_hline(yintercept = LCL2, color = "#AA2E25", size=1.2, lty="dotted") +
annotate(geom="text", x=0, y=UCL2+0.002, label=expression(paste("2",sigma)),
size = 5, color="#AA2E25") +
annotate(geom="text", x=0, y=LCL2-0.002, label=expression(paste("2",sigma)),
size = 5, color="#AA2E25") +
geom_hline(yintercept = UCL3, color = "#AA2E25", size=1.2) +
geom_hline(yintercept = LCL3, color = "#AA2E25", size=1.2) +
annotate(geom="text", x=0, y=UCL3+0.002, label=expression(paste("3",sigma)),
size = 5, color="#AA2E25") +
annotate(geom="text", x=0, y=LCL3-0.002, label=expression(paste("3",sigma)),
size = 5, color="#AA2E25") +
theme_light() +
theme(text = element_text(size = 10 * multi),
legend.position = c(0.12,0.86),
legend.background = element_rect(fill = "transparent"))
plot_rule6
#plot(value, col= colors)
abline(h=0.025, col="black")
abline(h=LCL, col="red",lty="dotted")
abline(h=UCL, col="red",lty="dotted")
abline(h=LCL2, col="red",lty="dotted")
abline(h=UCL2, col="red",lty="dotted")
abline(h=LCL3, col="black",lty="dotted")
abline(h=UCL3, col="black",lty="dotted")
abline(h=0.025, col="black")
abline(h=LCL, col="red",lty="dotted")
abline(h=UCL, col="red",lty="dotted")
abline(h=LCL2, col="red",lty="dotted")
abline(h=UCL2, col="red",lty="dotted")
abline(h=LCL3, col="black",lty="dotted")
abline(h=UCL3, col="black",lty="dotted")
#---------------------#
#### GENERIC CLOUD ####
#---------------------#
customTicks = as.character(c(expression(paste("3",sigma, "",sep = "")),
expression(paste("2",sigma, "",sep = "")),
expression(paste("1",sigma, "",sep = "")),
expression(mu),
expression(paste("1",sigma, "",sep = "")),
expression(paste("2",sigma, "",sep = "")),
expression(paste("3",sigma, "",sep = ""))
))
UCL = 0.025 + sqrt((0.025*0.975)/370)
LCL = 0.025 - sqrt((0.025*0.975)/370)
UCL2 = 0.025 + 2*sqrt((0.025*0.975)/370)
LCL2 = 0.025 - 2*sqrt((0.025*0.975)/370)
UCL3 = 0.025 + 3*sqrt((0.025*0.975)/370)
LCL3 = 0.025 - 3*sqrt((0.025*0.975)/370)
annot = data.frame(
xan = rep(16,7),
yan = c(UCL3, UCL2, UCL,0.025, LCL, LCL2, LCL3) * 100,
text = customTicks
)
annotCL = data.frame(
xan = c(1,1),
yan = c(UCL3, LCL3) * 100,
text = c("UCL", "LCL")
)
value = c(0.02432432,0.02162162,0.04013514,0.03352973,0.04891892,0.02972973,
0.03632432,0.01621622,0.02972973,0.01891892,0.00832432,0.01621622,
0.01062162,0.01254054,0.01891892)
ggplot() +
geom_point(mapping = aes(x=seq(1,15), y=value*100),
size = 4, shape = 4) +
geom_hline(yintercept = 2.5, color = "red") +
geom_hline(yintercept = UCL3 * 100, size=2) +
geom_hline(yintercept = UCL2 * 100, linetype= 2) +
geom_hline(yintercept = UCL * 100, linetype= 2) +
geom_hline(yintercept = LCL3 * 100, size=2) +
geom_hline(yintercept = LCL2 * 100, linetype=2) +
geom_hline(yintercept = LCL * 100, linetype=2) +
geom_label(mapping = aes(x = xan, y = yan, label = customTicks),
data = annot, parse = T, size = 8) +
geom_label(mapping = aes(x = xan, y = yan, label = text),
data = annotCL, parse = T, size = 8) +
xlab("Sample index") +
ylab("Proportion of SLO violations\nin each sample") +
ylim(c(0,5.5)) +
theme_classic() +
theme(
axis.text = element_text(size = 12 * multi),
axis.title = element_text(size = 12 * multi),
text = element_text(size = 7 * multi))
plot(value*100,
xlab = "Sample id",
ylab = "value of p in sample",
ylim = c(0,6),
cex = 2,
pch = 4,
cex.lab = 1.5)
axis(1, labels = F)
axis(2, at = seq(-3,3,1), labels = customTicks)
plot(1, type = "n",
xlab = "Temps ou Ordre de production",
ylab = "Valeurs",
xlim = c(0, 10),
ylim = c(-5,5),
cex = 2,
cex.lab = 1.5,
axes = F)
axis(1, labels = F)
axis(2, at = seq(-3,3,1), labels = customTicks)
# center line
abline(h=0, lwd = 3,
col = "red")
# 3sigma
abline(h=-3, lwd = 3)
abline(h=3, lwd = 3)
text(x=0, y=3 + 0.2, "UCL")
text(x=0, y=-3 - 0.2, "LCL")
# 2sigma
abline(h=-2, lwd = 1.5, lty = 2)
abline(h=2, lwd = 1.5, lty = 2)
text(x=0, y=2 + 0.2,
expression(paste("2",sigma, "",sep = ""))
)
text(x=0, y=-2 - 0.2,
expression(paste("2",sigma, "",sep = ""))
)
# 1sigma
abline(h=-1, lwd = 1.5, lty = 2)
abline(h=1, lwd = 1.5, lty = 2)
text(x=0, y=1 + 0.2,
expression(paste("1",sigma, "",sep = ""))
)
text(x=0, y=-1 - 0.2,
expression(paste("1",sigma, "",sep = ""))
)
#### SOUTENANCE ####
echantillon = 1:15
value = c(0.02432432,0.02162162,0.04513514,0.02972973,0.04891892,0.02972973,
0.02432432,0.03321622,0.04254054,0.03762162,0.02972973,0.02432432,
0.01891892,0.01621622,0.01891892)
Alerte = rep("NON", 15)
Alerte[5] = "OUI"
Alerte[14] = "OUI"
annot = data.frame(
xan = rep(16.6,7),
yan = c(UCL3, UCL2, UCL,0.025, LCL, LCL2, LCL3) * 100,
text = customTicks
)
annotCL = data.frame(
xan = c(1,1),
yan = c(UCL3, LCL3) * 100,
text = c("UCL", "LCL")
)
evol_CC = ggplot() + geom_point() + geom_hline(yintercept = 2.5, color = "red") +
geom_hline(yintercept = UCL3 * 100, size=2) +
geom_hline(yintercept = UCL2 * 100, linetype= 2) +
geom_hline(yintercept = UCL * 100, linetype= 2) +
geom_hline(yintercept = LCL3 * 100, size=2) +
geom_hline(yintercept = LCL2 * 100, linetype=2) +
geom_hline(yintercept = LCL * 100, linetype=2) +
geom_label(mapping = aes(x = xan, y = yan, label = customTicks),
data = annot, parse = T, size = 7) +
geom_label(mapping = aes(x = xan, y = yan, label = text),
data = annotCL, parse = T, size = 7) +
geom_point(mapping = aes(x=seq(1,15), y=value*100, color=Alerte),
size = 4, alpha=0) +
xlab("Numéro d'échantillon") +
ylab("Proportion de violations de SLO") +
ylim(c(0,5.2)) +
xlim(c(0.5,16.7)) +
theme_classic() +
theme(
legend.position = "none",
axis.text = element_text(size = 9 * multi),
axis.title = element_text(size = 9 * multi),
text = element_text(size = 7 * multi)) +
scale_color_manual(values = c("#000000", "#F6685E")) +
guides(color = guide_legend(title = "Alerte",
override.aes = list(alpha = 1)))
evol_CC
for(i in 1:15){
evol_CC = evol_CC + geom_point(mapping = aes(x=seq(1,i), y=value[1:i]*100, color=Alerte[1:i]),
size = 4)
if(i == 5){
evol_CC = evol_CC  +
geom_rect(mapping = aes(xmin=2.5, xmax=5.5, ymin=0, ymax=5),
colour = "grey", alpha= 0.2)
}
if(i == 14){
evol_CC = evol_CC  +
geom_rect(mapping = aes(xmin=8.5, xmax=14.5, ymin=0, ymax=5),
colour = "grey", alpha= 0.2)
}
plot(evol_CC)
}
shiny::runApp('Documents/EuropeanParliamentVote/data_visualisation/EuropeanParliamentVote')
runApp('Documents/EuropeanParliamentVote/data_visualisation/EuropeanParliamentVote')
isnull?
?
)
poolReturn()
shiny::runApp('Documents/EuropeanParliamentVote/data_visualisation/EuropeanParliamentVote')
runApp('Documents/EuropeanParliamentVote/data_visualisation/EuropeanParliamentVote')
runApp('Documents/EuropeanParliamentVote/data_visualisation/EuropeanParliamentVote')
shiny::runApp('Documents/EuropeanParliamentVote/data_visualisation/EuropeanParliamentVote')
shiny::runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
print(resData)
print(input_text_id)
library(DBI)
if(text){
input_text_id = "
SELECT reference, reference || ' - ' || LEFT(description, 120) || '...'
FROM project.text;
"
}
if(TRUE){}
if(TRUE){print("ok")}
if(isText){
input_text_id = "
SELECT reference, reference || ' - ' || LEFT(description, 120) || '...'
FROM project.text;
"
}
isText
c
shiny::runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
shiny::runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
shiny::runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
shiny::runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
shiny::runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
shiny::runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
shiny::runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
Q
Q
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
Q
shiny::runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
shiny::runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
shiny::runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
shiny::runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
shiny::runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
runApp('Documents/EuropeanParliamentVote/data_visualisation/result_vote_webapp')
